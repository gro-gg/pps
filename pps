#!/bin/bash

# Copyright (C) 2015 Philipp Grogg

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version. This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See LICENSE file for more details.

# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.

###############
# Configuration
###############

# The config directory:
_pps_config=~/.config/pps
_pps_task_cache=~/.cache/pps

# Desable this option for debug output:
#DEBUG=1

###################
# private functions
###################

__pps_print_usage() {
    echo "usage:"
    echo "pps <profile>     : activates the defined <profile>"
    echo "pps clean         : clear the actual profile"
    echo "pps status        : prints the current profile"
    echo "pps task <task>   : activates the defined <task>"
}

# initializes a new config directory in $_pps_config if it doesn't exist
__pps_init_config() {
    if [ ! -d "${_pps_config}" ] ; then
        echo "pps config directory ${_pps_config} does not exist!"
        echo "Creating initial config in directory ${_pps_config}"
        mkdir -p "${_pps_config}"
        cp template "${_pps_config}"/template
    fi
}

__pps_init_cache() {
    if [ ! -d "${_pps_task_cache}" ] ; then
        mkdir -p "${_pps_task_cache}"
    fi
}

# functions will be overritten by sourcing the profile config files
__pps_set-up() {
    :
}
__pps_tear-down() {
    :
}

# swtich the current profile
# $1: the profile name
__pps_switch-profile() {
    logDebug "__pps_switch-profile() $1"
    __pps_tear-down
    . "${_pps_config}/$1"
    __pps_set-up
    export _pps_current_project="$1"
    __pps_set_lp_prompt
}

__pps_switch_task() {
    logDebug "__pps_switch-task() $1"
    if [ ! -z ${_pps_current_project} ] ; then
        export _pps_current_task="$1"
        __pps_set_lp_prompt
        __pps_write_task_cache "$1"
    else
        echo "Cannot switch task, first choose a profile!\n"
        __pps_print_usage
    fi
}

__pps_set_lp_prompt() {
    logDebug "__pps_set_lp_prompt()"
    LP_PS1_PREFIX="${_pps_current_project}"
    if [ ! -z ${_pps_current_task} ] ; then
        LP_PS1_PREFIX="${LP_PS1_PREFIX}(${_pps_current_task})"
    fi
    export LP_PS1_PREFIX="${LP_PS1_PREFIX} "
}

__pps_disable-profile() {
    logDebug "__pps_disable-profile()"
    __pps_tear-down
    unset _pps_current_project
    unset LP_PS1_PREFIX
}


__pps_disable_task() {
    logDebug "__pps_disable_task()"
    unset _pps_current_task
    __pps_set_lp_prompt
}

# $1: task to write
__pps_write_task_cache() {
    local cache_file
    cache_file="${_pps_task_cache}/${_pps_current_project}"
    logDebug "Writing new task $1 to chache file ${cache_file} if not exists"
    grep "^$1$" "${cache_file}" > /dev/null 2>&1 || echo "$1" >> "${cache_file}"
}

# print the current profile
__pps_print_status() {
    if [ -z ${_pps_current_project} ] ; then
        echo "Current project: No project selected!"
    else
        echo "Current project: ${_pps_current_project}"
    fi
}

# function used for shell completion
__pps_complete() {
    local complete_list
    
    cur_word="${COMP_WORDS[COMP_CWORD]}"
    prev_word="${COMP_WORDS[COMP_CWORD-1]}"

    if [ $prev_word == "pps" ] ; then
        complete_list=$(\ls -1 "${_pps_config}"/ |grep -v template)
        complete_list+=" clean"
        complete_list+=" status"
        complete_list+=" task"
    elif [[ $prev_word == "task" && ! -z ${_pps_current_project} ]] ; then
        cache_file="${_pps_task_cache}/${_pps_current_project}"
        complete_list=$(cat $cache_file)
        complete_list+=" clean"
    fi
    COMPREPLY=( $(compgen -W "${complete_list}" -- ${cur_word}) )
    return 0
}

# adds a directory to PATH variable
__pps_add_to_path() {
    if [ -d $1 ] ; then
        logDebug "adding '$1' to PATH variable"
        export PATH="$1:$PATH"
    else
        echo "Cannot add '$1' to PATH variable, it is not a valid directory"
    fi
}

listcontains() {
    [[ $1 =~ (^| )$2($| ) ]] && return 0 || return 1
}

logDebug() {
    if listcontains "ON on 1" "${DEBUG}" ; then
       echo "[DEBUG]: ${*}" 
    fi
}

######
# main
######

#first backup PATH
PATH_BACKUP="$PATH"

# enable shell completion
complete -F __pps_complete pps

pps() {
    __pps_init_config
    __pps_init_cache

    if [ $# -lt 1 ] ; then
        __pps_print_usage
        return 1
    fi

    if [ -f "${_pps_config}/$1" ] ; then
        __pps_switch-profile "$1"
    else
        if listcontains "clear clean disable" "$1" ; then
            __pps_disable-profile
        elif listcontains "status" "$1" ; then
            __pps_print_status
        elif listcontains "task" "$1" ; then
            if [ "$#" -ne 2 ] ; then
                __pps_print_usage
                return 1
            fi
            if listcontains "clear clean disable" "$2" ; then
                __pps_disable_task
            else
                __pps_switch_task "$2"
            fi
        else
            echo "Unknown profile: $1"
            __pps_print_usage
            return 1
        fi
    fi
}

