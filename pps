#!/bin/bash

PPS_CONFIG=~/.config/pps

DEBUG=1

###################
# private functions
###################

__pps_print_usage() {
	echo "usage:"
	echo "pps <profile>     : activates the defined <profile>"
	echo "pps clean         : clear the actual profile"
}

__pps_init_config() {
	if [ ! -d "${PPS_CONFIG}" ] ; then
		echo "pps config directory ${PPS_CONFIG} does not exist!"
		echo "Creating initial config in directory ${PPS_CONFIG}"
		mkdir -p "${PPS_CONFIG}"
		cp template "${PPS_CONFIG}"/template
	fi
}

__pps_set-up() {
	:
}

__pps_tear-down() {
	:
}

__pps_switch-profile() {
	logDebug "__pps_switch-profile() $1"
	__pps_tear-down
	. "${PPS_CONFIG}/$1"
	__pps_set-up
	export LP_PS1_PREFIX="{$1} "
}

__pps_disable-profile() {
	logDebug "__pps_disable-profile()"
	__pps_tear-down
    unset LP_PS1_PREFIX
}

__pps_complete() {
    cur_word="${COMP_WORDS[COMP_CWORD]}"
    prev_word="${COMP_WORDS[COMP_CWORD-1]}"

    profile_list=$(ls -1 "${PPS_CONFIG}"/ |grep -v template)
	profile_list+=" clean"

    if [ $prev_word == "pps" ] ; then
        COMPREPLY=( $(compgen -W "${profile_list}" -- ${cur_word}) )
    fi
    return 0
}

__pps_add_to_path() {
	if [ -d $1 ] ; then
		logDebug "adding '$1' to PATH variable"
		export PATH="$1:$PATH"
	else
		echo "Cannot add '$1' to PATH variable, it is not a valid directory"
	fi
}

listcontains() {
	[[ $1 =~ (^| )$2($| ) ]] && return 0 || return 1
}

logDebug() {
    if listcontains "ON on 1" "${DEBUG}" ; then
	   echo "[DEBUG]: ${*}" 
	fi
}

######
# main
######

#first backup PATH
PATH_BACKUP="$PATH"

complete -F __pps_complete pps

pps() {
	__pps_init_config

	if [ $# -ne 1 ] ; then
		__pps_print_usage
		return 1
	fi

	if [ -f "${PPS_CONFIG}/$1" ] ; then
		__pps_switch-profile "$1"
	else
		if listcontains "clear clean disable" "$1" ; then
			__pps_disable-profile
		else
			echo "Unknown profile: $1"
			__pps_print_usage
			return 1
		fi
	fi
}

